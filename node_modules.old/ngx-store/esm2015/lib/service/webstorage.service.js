import { Config, debug } from '../config/config';
import { Cache } from '../decorator/cache';
import { delay, filter } from 'rxjs/operators';
import { NgxStorageEvent } from '../utility/storage/storage-event';
import { Resource } from './resource';
import merge from 'lodash.merge';
// const merge = require('lodash.merge');
export class WebStorageService {
    constructor(utility) {
        this.utility = utility;
    }
    /**
     * Gets keys for stored variables created by ngx-store,
     * ignores keys that have not been created by decorators and have no prefix at once
     */
    get keys() {
        // get prefixed key if prefix is defined
        const prefixKeys = this.utility.keys.filter(key => {
            if (this.utility.prefix && this.utility.prefix.length) {
                return key.startsWith(this.utility.prefix);
            }
            return true;
        });
        const decoratorKeys = this.constructor.keys;
        return prefixKeys.concat(decoratorKeys);
    }
    get config() {
        return Config;
    }
    get(key) {
        return this.utility.get(key);
    }
    /**
     * Returns new data Resource for given key exposing builder design pattern
     * designed for complex nested data structures
     */
    load(key) {
        return new Resource(this, key);
    }
    set(key, value) {
        return this.utility.set(key, value);
    }
    update(key, changes) {
        const value = this.get(key);
        if (value !== undefined && typeof value !== 'object') {
            debug.throw(new Error(`Value stored under "${key}" key is not an object and tried to be updated.`));
            return value;
        }
        return this.set(key, merge({}, value, changes));
    }
    // TODO return true if item existed and false otherwise (?)
    remove(key) {
        return this.utility.remove(key);
    }
    observe(key, exactMatch) {
        return this._changes.pipe(filter((event) => {
            var _a;
            if (!key) {
                return true;
            }
            if (exactMatch) {
                if (Config.prefix && key.startsWith(Config.prefix)) {
                    return event.key === key;
                }
                return event.key === Config.prefix + key;
            }
            else {
                return ((_a = event.key) === null || _a === void 0 ? void 0 : _a.indexOf(key)) !== -1;
            }
        }), delay(30));
    }
    /**
     * Clears chosen data from Storage
     * @param clearType 'prefix' | 'decorators' | 'all'
     * @param prefixOrClass defines the prefix or class (not its instance) whose decorators should be cleared
     */
    clear(clearType, prefixOrClass) {
        clearType = clearType || Config.clearType;
        if (clearType === 'decorators') {
            let keys = [];
            if (typeof prefixOrClass === 'object') {
                keys = this.keys.filter(key => Cache.get(key).targets.includes(prefixOrClass));
                debug.log(this.utility.getStorageName() + ' > Removing decorated data from '
                    + prefixOrClass.constructor.name + ':', keys);
            }
            else {
                keys = this.keys;
                debug.log(this.utility.getStorageName() + ' > Removing decorated data:', keys);
            }
            keys.forEach(key => this.remove(key));
        }
        else if (clearType === 'prefix') {
            prefixOrClass = prefixOrClass || this.utility.prefix;
            this.utility.forEach((value, key) => {
                if (key.startsWith(prefixOrClass)) {
                    this.remove(this.utility.trimPrefix(key));
                }
            });
        }
        else if (clearType === 'all') {
            this.utility.clear();
        }
    }
    generateEvent(key, newValue, oldValue) {
        const type = this.utility.getStorageName().charAt(0).toLowerCase() + this.utility.getStorageName().slice(1);
        const event = new NgxStorageEvent(type, key, this.utility.getStorage());
        event.oldValue = (oldValue !== undefined) ? oldValue : this.get(key);
        event.newValue = newValue;
        return event;
    }
    mapNativeEvent(ev) {
        const event = this.generateEvent(ev.key, this.utility.getGettable(ev.newValue), this.utility.getGettable(ev.oldValue));
        event.isInternal = false;
        return event;
    }
}
WebStorageService.keys = [];
//# sourceMappingURL=data:application/json;base64,