import { Config } from '../config/config';
const _get = require('lodash.get');
const _set = require('lodash.set');
const _merge = require('lodash.merge');
export class Resource {
    constructor(service, key) {
        this.service = service;
        this.key = key;
        this._defaultValue = null;
        this._path = [];
        this._prefix = Config.prefix;
    }
    /**
     * Returns default value
     * @returns {T}
     */
    get defaultValue() {
        return this._defaultValue;
    }
    /**
     * Returns current path as a string
     * @returns {string}
     */
    get path() {
        return this.pathString;
    }
    /**
     * Returns currently set prefix
     * @returns {string}
     */
    get prefix() {
        return this._prefix || '';
    }
    /**
     * Returns value taking path into account
     * @returns {T}
     */
    get value() {
        return this.considerDefault(this.readValue());
    }
    get fullValue() {
        return this.considerDefault(this.service.utility.get(this.key, { prefix: this._prefix }));
    }
    get pathString() {
        return this._path.join('.');
    }
    /**
     * Sets path of object property
     * @param {string} path
     * @returns {this}
     */
    setPath(path) {
        this._path = path.split('.');
        return this;
    }
    /**
     * Appends current path
     * e.g. if path('key') and appendPath('nested'), the path will be "key.nested"
     * @param {string} path
     * @returns {this}
     */
    appendPath(path) {
        this._path.push(path);
        return this;
    }
    /**
     * Removes last item of path
     * e.g. if path('key.nested') and truncatePath(), the path will be "key"
     * @returns {this}
     */
    truncatePath() {
        this._path.pop();
        return this;
    }
    /**
     * Resets set path
     * @returns {this}
     */
    resetPath() {
        this._path = [];
        return this;
    }
    /**
     * Sets prefix
     * @param {string} prefix
     * @returns {this}
     */
    setPrefix(prefix) {
        this._prefix = prefix;
        return this;
    }
    /**
     * Moves storage item to new key using given prefix
     * @param {string} prefix
     * @returns {this}
     */
    changePrefix(prefix) {
        this.service.utility.set(this.key, this.fullValue, { prefix });
        this.service.utility.remove(this.key, { prefix: this._prefix });
        return this.setPrefix(prefix);
    }
    /**
     * Sets default value for both reading and saving operations
     * @param defaultValue
     * @returns {this}
     */
    setDefaultValue(defaultValue) {
        this._defaultValue = defaultValue;
        const value = this.readValue();
        if (this.isNullOrUndefined(value)) {
            this.save(defaultValue);
        }
        return this;
    }
    /**
     * Creates or overrides value as a new entry or existing object property depending on path
     * @param value
     * @returns {this}
     */
    save(value) {
        if (this.pathString) {
            value = _set(this.fullValue, this.pathString, this.considerDefault(value));
        }
        this.service.utility.set(this.key, this.considerDefault(value), { prefix: this._prefix });
        return this;
    }
    /**
     * Updates existing object property using current path
     * @param {T} value
     * @returns {this}
     */
    update(value) {
        return this.save(_merge(this.readValue(), value));
    }
    /**
     * Removes item stored under current key
     * @returns {this}
     */
    remove() {
        this.service.utility.remove(this.key);
        return this;
    }
    considerDefault(value) {
        return this.isNullOrUndefined(value) ? this._defaultValue : value;
    }
    isNullOrUndefined(value) {
        return (value === null || value === undefined);
    }
    readValue() {
        const value = this.service.utility.get(this.key, { prefix: this._prefix });
        if (this.pathString) {
            return _get(value, this.pathString);
        }
        return value;
    }
}
//# sourceMappingURL=data:application/json;base64,