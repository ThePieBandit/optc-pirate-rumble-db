import { Config, debug } from '../config/config';
const isEqual = require('lodash.isequal');
export class Cache {
    static getCacheFor(cacheCandidate) {
        let cacheItem = Cache.get(cacheCandidate.key);
        if (!cacheItem) {
            cacheItem = new CacheItem(cacheCandidate);
            debug.log(`Created new CacheItem for ${cacheCandidate.name} for ${cacheItem.utilities[0].utility.getStorageName()}`);
            Cache.set(cacheItem);
            return cacheItem;
        }
        debug.log(`Loaded prior CacheItem of ${cacheItem.name}
     for ${cacheCandidate.utilities[0].utility.getStorageName()}`);
        cacheItem.addTargets(cacheCandidate.targets);
        cacheItem.addServices(cacheCandidate.services);
        cacheItem.addUtilities(cacheCandidate.utilities);
        Cache.set(cacheItem);
        return cacheItem;
    }
    static remove(cacheItem) {
        return Cache.items.delete(cacheItem.key);
    }
    static get(key) {
        return Cache.items.get(key);
    }
    static set(cacheItem) {
        if (!Cache.get(cacheItem.key)) {
            debug.log('CacheItem for ' + cacheItem.key, cacheItem);
        }
        Cache.items.set(cacheItem.key, cacheItem);
    }
}
Cache.items = new Map();
// tslint:disable:only-arrow-functions
export class CacheItem {
    constructor(cacheItem) {
        this.name = '';
        this.targets = [];
        this.services = [];
        this.utilities = [];
        this.currentTarget = {};
        this.proxy = null;
        this._key = '';
        this.initializedTargets = new Set();
        this._key = cacheItem.key;
        this.name = cacheItem.name;
        this.addTargets(cacheItem.targets);
        this.addServices(cacheItem.services);
        this.addUtilities(cacheItem.utilities);
    }
    get key() {
        return this._key;
    }
    saveValue(value, config = {}) {
        debug.groupCollapsed('CacheItem#saveValue for ' + this.key + ' in ' + this.currentTarget.constructor.name);
        debug.log('new value: ', value);
        // if (value === false && this.readValue() === true) debugger;
        debug.log('previous value: ', this.readValue());
        debug.log('targets.length: ', this.targets.length);
        debug.log('currentTarget:', this.currentTarget);
        debug.groupEnd();
        // prevent overwriting value by initializators
        if (!this.initializedTargets.has(this.currentTarget)) {
            this.initializedTargets.add(this.currentTarget);
            let readValue = this.readValue();
            if (config.migrateKey) {
                this.migrate(config, this.utilities[0].utility);
                readValue = this.readValue();
            }
            const savedValue = (readValue !== null && readValue !== undefined) ? readValue : value;
            let proxy = this.getProxy(savedValue, config);
            proxy = (proxy !== null) ? proxy : value;
            debug.log('initial value for ' + this.key + ' in ' + this.currentTarget.constructor.name, proxy);
            this.propagateChange(savedValue);
            return proxy;
        }
        this.propagateChange(value);
        return this.getProxy(value, config);
    }
    getProxy(value, config = {}) {
        if (value === undefined && this.proxy) {
            return this.proxy;
        } // return cached proxy if value hasn't changed
        value = (value === undefined) ? this.readValue() : value;
        if (typeof value !== 'object' || value === null) {
            this.proxy = value;
            return value;
        }
        if ((!Config.mutateObjects && !config.mutate) || config.mutate === false) {
            return value;
        }
        const _self = this; // alias to use in standard function expressions
        const prototype = Object.assign(new value.constructor(), value.__proto__);
        prototype.save = function () {
            _self.saveValue(value, config);
        };
        // TODO set prototype for Array.prototype or something
        if (Array.isArray(value)) { // handle methods that could change value of array
            const methodsToOverwrite = [
                'pop', 'push', 'reverse', 'shift', 'unshift', 'splice',
                'filter', 'forEach', 'map', 'fill', 'sort', 'copyWithin',
            ];
            for (const method of methodsToOverwrite) {
                prototype[method] = function () {
                    const readValue = _self.readValue();
                    // @ts-ignore
                    const result = Array.prototype[method].apply(readValue, arguments);
                    debug.log('Saving value for ' + _self.key + ' by method '
                        + prototype.constructor.name + '.' + method);
                    _self.saveValue(readValue, config);
                    return result;
                };
            }
        }
        Object.setPrototypeOf(value, prototype);
        this.proxy = value;
        return value;
    }
    readValue(config = {}) {
        const entry = this.utilities[0];
        const value = entry ? entry.utility.get(this.key, entry.config) : null;
        return (typeof value !== 'object') ? value : JSON.parse(JSON.stringify(this.getProxy(value, entry.config)));
    }
    addTargets(targets) {
        targets.forEach(target => {
            if (this.targets.indexOf(target) === -1) {
                if (typeof target === 'object') { // handle Angular Component destruction
                    const originalFunction = target.ngOnDestroy;
                    const _self = this;
                    target.ngOnDestroy = function () {
                        if (typeof originalFunction === 'function') {
                            originalFunction.apply(this, arguments);
                        }
                        target.ngOnDestroy = originalFunction || function () { };
                        _self.initializedTargets.delete(target);
                        _self.targets = _self.targets.filter(t => t !== target);
                        if (!_self.targets.length) {
                            _self.services.forEach(service => {
                                service.keys = service.keys.filter(key => key !== _self._key);
                            });
                            _self.resetProxy();
                            Cache.remove(_self);
                        }
                        debug.groupCollapsed(`${_self.key} OnDestroy handler:`);
                        debug.log('removed target:', target.constructor.name);
                        debug.log('remaining targets:', _self.targets);
                        debug.log('cacheItem:', Cache.get(_self.key));
                        debug.groupEnd();
                    };
                    this.targets.push(target);
                }
            }
        });
    }
    addServices(services) {
        services.forEach(service => {
            if (this.services.indexOf(service) === -1) {
                service.keys.push(this._key);
                this.services.push(service);
            }
        });
    }
    addUtilities(utilityEntries) {
        utilityEntries.forEach(entry => {
            if (this.utilities.findIndex(e => e.utility === entry.utility) === -1) {
                this.utilities.push(entry);
                entry.utility.set(this.key, this.readValue());
            }
        });
    }
    resetProxy() {
        this.proxy = null;
    }
    propagateChange(value, source) {
        if (isEqual(value, this.readValue())) {
            return;
        }
        this.utilities.forEach(entry => {
            const utility = entry.utility;
            // updating service which the change came from would affect in a cycle
            if (utility === source) {
                return;
            }
            debug.log(`propagating change on ${this.key} to:`, utility);
            utility.set(this._key, value, entry.config);
        });
    }
    migrate(config, utility) {
        const prefix = (config.prefix || Config.prefix) || '';
        const keyExists = (key) => key in utility.getStorage();
        const migrateKey = keyExists(prefix + config.migrateKey)
            ? prefix + config.migrateKey
            : config.migrateKey;
        if (!keyExists(migrateKey)) {
            return;
        }
        debug.log('Migrating', migrateKey, 'to', config.key, 'in', utility.getStorageName());
        const value = utility.get(migrateKey, Object.assign(Object.assign({}, config), { prefix: '' }));
        utility.set(this._key, value);
        utility.remove(migrateKey, { prefix: '' });
    }
}
//# sourceMappingURL=data:application/json;base64,