export class NgxStorageEvent {
    constructor(type, key, storageArea) {
        this.type = type;
        this.key = key;
        this.storageArea = storageArea;
        this.timeStamp = (Date.now() - NgxStorageEvent.initTimeStamp);
        this.bubbles = false;
        this.cancelBubble = false;
        this.cancelable = false;
        this.composed = false;
        this.currentTarget = window;
        this.defaultPrevented = false;
        this.eventPhase = 2;
        this.isTrusted = true;
        this.path = [window];
        this.returnValue = true;
        this.srcElement = window;
        this.target = window;
        this.url = window.location.href;
        this.isInternal = true;
    }
    /**
     * Methods below exist only to satisfy TypeScript compiler
     */
    // tslint:disable:typedef
    get initEvent() {
        return StorageEvent.prototype.initEvent.bind(this);
    }
    get preventDefault() {
        return StorageEvent.prototype.preventDefault.bind(this);
    }
    get stopImmediatePropagation() {
        return StorageEvent.prototype.stopImmediatePropagation.bind(this);
    }
    get stopPropagation() {
        return StorageEvent.prototype.stopPropagation.bind(this);
    }
    get composedPath() {
        return StorageEvent.prototype.composedPath.bind(this);
    }
    get AT_TARGET() {
        return StorageEvent.prototype.AT_TARGET;
    }
    get BUBBLING_PHASE() {
        return StorageEvent.prototype.BUBBLING_PHASE;
    }
    get CAPTURING_PHASE() {
        return StorageEvent.prototype.BUBBLING_PHASE;
    }
}
NgxStorageEvent.initTimeStamp = Date.now();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS1ldmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zdG9yZS9zcmMvbGliL3V0aWxpdHkvc3RvcmFnZS9zdG9yYWdlLWV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxlQUFlO0lBcUIxQixZQUFtQixJQUFZLEVBQVMsR0FBVyxFQUFTLFdBQW9CO1FBQTdELFNBQUksR0FBSixJQUFJLENBQVE7UUFBUyxRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQVMsZ0JBQVcsR0FBWCxXQUFXLENBQVM7UUFoQnpFLGNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDaEQsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUNyQixlQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ25CLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsa0JBQWEsR0FBRyxNQUFNLENBQUM7UUFDdkIscUJBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLGVBQVUsR0FBRyxDQUFDLENBQUM7UUFDZixjQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLFNBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hCLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ25CLGVBQVUsR0FBRyxNQUFhLENBQUM7UUFDM0IsV0FBTSxHQUFHLE1BQU0sQ0FBQztRQUNoQixRQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDcEMsZUFBVSxHQUFHLElBQUksQ0FBQztJQUd6QixDQUFDO0lBRUQ7O09BRUc7SUFDSCx5QkFBeUI7SUFDekIsSUFBVyxTQUFTO1FBQ2xCLE9BQU8sWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxJQUFXLGNBQWM7UUFDdkIsT0FBTyxZQUFZLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELElBQVcsd0JBQXdCO1FBQ2pDLE9BQU8sWUFBWSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELElBQVcsZUFBZTtRQUN4QixPQUFPLFlBQVksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsSUFBVyxZQUFZO1FBQ3JCLE9BQU8sWUFBWSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxJQUFXLFNBQVM7UUFDbEIsT0FBTyxZQUFZLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsSUFBVyxjQUFjO1FBQ3ZCLE9BQU8sWUFBWSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUM7SUFDL0MsQ0FBQztJQUVELElBQVcsZUFBZTtRQUN4QixPQUFPLFlBQVksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDO0lBQy9DLENBQUM7O0FBekRnQiw2QkFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBOZ3hTdG9yYWdlRXZlbnQ8VCA9IGFueT4gaW1wbGVtZW50cyBPbWl0PFN0b3JhZ2VFdmVudCwgJ29sZFZhbHVlJyB8ICduZXdWYWx1ZSc+IHtcbiAgcHJvdGVjdGVkIHN0YXRpYyBpbml0VGltZVN0YW1wID0gRGF0ZS5ub3coKTtcbiAgcHVibGljIG9sZFZhbHVlITogVDtcbiAgcHVibGljIG5ld1ZhbHVlITogVDtcbiAgcHVibGljIE5PTkU6IGFueTtcbiAgcHVibGljIHRpbWVTdGFtcCA9IChEYXRlLm5vdygpIC0gTmd4U3RvcmFnZUV2ZW50LmluaXRUaW1lU3RhbXApO1xuICBwdWJsaWMgcmVhZG9ubHkgYnViYmxlcyA9IGZhbHNlO1xuICBwdWJsaWMgcmVhZG9ubHkgY2FuY2VsQnViYmxlID0gZmFsc2U7XG4gIHB1YmxpYyByZWFkb25seSBjYW5jZWxhYmxlID0gZmFsc2U7XG4gIHB1YmxpYyByZWFkb25seSBjb21wb3NlZCA9IGZhbHNlO1xuICBwdWJsaWMgcmVhZG9ubHkgY3VycmVudFRhcmdldCA9IHdpbmRvdztcbiAgcHVibGljIHJlYWRvbmx5IGRlZmF1bHRQcmV2ZW50ZWQgPSBmYWxzZTtcbiAgcHVibGljIHJlYWRvbmx5IGV2ZW50UGhhc2UgPSAyO1xuICBwdWJsaWMgcmVhZG9ubHkgaXNUcnVzdGVkID0gdHJ1ZTtcbiAgcHVibGljIHJlYWRvbmx5IHBhdGggPSBbd2luZG93XTtcbiAgcHVibGljIHJlYWRvbmx5IHJldHVyblZhbHVlID0gdHJ1ZTtcbiAgcHVibGljIHJlYWRvbmx5IHNyY0VsZW1lbnQgPSB3aW5kb3cgYXMgYW55O1xuICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0ID0gd2luZG93O1xuICBwdWJsaWMgcmVhZG9ubHkgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHB1YmxpYyBpc0ludGVybmFsID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdHlwZTogc3RyaW5nLCBwdWJsaWMga2V5OiBzdHJpbmcsIHB1YmxpYyBzdG9yYWdlQXJlYTogU3RvcmFnZSkge1xuICB9XG5cbiAgLyoqXG4gICAqIE1ldGhvZHMgYmVsb3cgZXhpc3Qgb25seSB0byBzYXRpc2Z5IFR5cGVTY3JpcHQgY29tcGlsZXJcbiAgICovXG4gIC8vIHRzbGludDpkaXNhYmxlOnR5cGVkZWZcbiAgcHVibGljIGdldCBpbml0RXZlbnQoKSB7XG4gICAgcmV0dXJuIFN0b3JhZ2VFdmVudC5wcm90b3R5cGUuaW5pdEV2ZW50LmJpbmQodGhpcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHByZXZlbnREZWZhdWx0KCkge1xuICAgIHJldHVybiBTdG9yYWdlRXZlbnQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0LmJpbmQodGhpcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIHtcbiAgICByZXR1cm4gU3RvcmFnZUV2ZW50LnByb3RvdHlwZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24uYmluZCh0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgc3RvcFByb3BhZ2F0aW9uKCkge1xuICAgIHJldHVybiBTdG9yYWdlRXZlbnQucHJvdG90eXBlLnN0b3BQcm9wYWdhdGlvbi5iaW5kKHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGdldCBjb21wb3NlZFBhdGgoKSB7XG4gICAgcmV0dXJuIFN0b3JhZ2VFdmVudC5wcm90b3R5cGUuY29tcG9zZWRQYXRoLmJpbmQodGhpcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IEFUX1RBUkdFVCgpIHtcbiAgICByZXR1cm4gU3RvcmFnZUV2ZW50LnByb3RvdHlwZS5BVF9UQVJHRVQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IEJVQkJMSU5HX1BIQVNFKCkge1xuICAgIHJldHVybiBTdG9yYWdlRXZlbnQucHJvdG90eXBlLkJVQkJMSU5HX1BIQVNFO1xuICB9XG5cbiAgcHVibGljIGdldCBDQVBUVVJJTkdfUEhBU0UoKSB7XG4gICAgcmV0dXJuIFN0b3JhZ2VFdmVudC5wcm90b3R5cGUuQlVCQkxJTkdfUEhBU0U7XG4gIH1cbn1cbiJdfQ==