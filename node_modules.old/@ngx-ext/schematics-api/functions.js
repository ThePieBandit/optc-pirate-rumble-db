"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHost = exports.getSourceFile = exports.getDefaultProjectRootModulePath = exports.getProjectMainFilePath = exports.getWorkspace = exports.getProjectTargetOptions = void 0;
var ts = require("@schematics/angular/third_party/github.com/Microsoft/TypeScript/lib/typescript");
var ng_ast_utils_1 = require("@schematics/angular/utility/ng-ast-utils");
var schematics_api_exception_1 = require("./schematics-api-exception");
var core_1 = require("@angular-devkit/core");
/** Resolves the architect options for the build target of the given project. */
function getProjectTargetOptions(project, buildTarget) {
    if (project.architect &&
        project.architect[buildTarget] &&
        project.architect[buildTarget].options) {
        return project.architect[buildTarget].options;
    }
    throw new schematics_api_exception_1.SchematicsApiException("Cannot determine project target configuration for: " + buildTarget + ".");
}
exports.getProjectTargetOptions = getProjectTargetOptions;
function getWorkspace(host) {
    var workspaceConfig = host.read('/angular.json');
    if (!workspaceConfig) {
        throw new schematics_api_exception_1.SchematicsApiException('Could not find Angular workspace configuration');
    }
    return JSON.parse(workspaceConfig.toString());
}
exports.getWorkspace = getWorkspace;
/** Looks for the main TypeScript file in the given project and returns its path. */
function getProjectMainFilePath(project) {
    var buildOptions = getProjectTargetOptions(project, 'build');
    if (!buildOptions.main) {
        throw new schematics_api_exception_1.SchematicsApiException("Could not find the project main file inside of the " +
            ("workspace config (" + project.sourceRoot + ")"));
    }
    return buildOptions.main;
}
exports.getProjectMainFilePath = getProjectMainFilePath;
function getDefaultProjectRootModulePath(tree) {
    var workspace = getWorkspace(tree);
    var project = workspace.projects[workspace.defaultProject];
    return ng_ast_utils_1.getAppModulePath(tree, getProjectMainFilePath(project));
}
exports.getDefaultProjectRootModulePath = getDefaultProjectRootModulePath;
/** Reads file given path and returns TypeScript source file. */
function getSourceFile(host, path) {
    var buffer = host.read(path);
    if (!buffer) {
        throw new schematics_api_exception_1.SchematicsApiException("Could not find file for path: " + path);
    }
    return ts.createSourceFile(path, buffer.toString(), ts.ScriptTarget.Latest, true);
}
exports.getSourceFile = getSourceFile;
function createHost(tree) {
    return {
        read: function (path) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    data = tree.read(path);
                    if (!data) {
                        throw new schematics_api_exception_1.SchematicsApiException('File not found.');
                    }
                    return [2 /*return*/, core_1.virtualFs.fileBufferToString(data)];
                });
            });
        },
        write: function (path, data) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, tree.overwrite(path, data)];
                });
            });
        },
    };
}
exports.createHost = createHost;
