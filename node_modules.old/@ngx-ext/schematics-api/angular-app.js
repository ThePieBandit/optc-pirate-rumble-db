"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AngularApp = void 0;
var ast_utils_1 = require("@schematics/angular/utility/ast-utils");
var ng_ast_utils_1 = require("@schematics/angular/utility/ng-ast-utils");
var core_1 = require("@angular-devkit/core");
var root_module_1 = require("./root-module");
var schematics_api_exception_1 = require("./schematics-api-exception");
var functions_1 = require("./functions");
var AngularApp = /** @class */ (function () {
    function AngularApp(tree) {
        this.tree = tree;
        /**
         * Find all nodes from the AST in the subtree of node of SyntaxKind kind.
         * Params:
         * max – The maximum number of items to return.
         * recursive – Continue looking for nodes of kind recursive until end the last child even when node of kind has been found.
         * Returns:
         * all nodes of kind, or [] if none is found
         */
        this.findNodes = ast_utils_1.findNodes;
        /**
         * Get all the nodes from a source.
         * @param sourceFile The source file object.
         * @returns {Array<ts.Node>} An array of all the nodes in the source.
         */
        this.getNodesFromSource = ast_utils_1.getSourceNodes;
    }
    AngularApp.getInstance = function (tree) {
        this._instance = new AngularApp(tree);
        return this._instance;
    };
    AngularApp.prototype.getRootModule = function () {
        return root_module_1.RootModule.getInstance(this.tree);
    };
    AngularApp.prototype.getWorkspace = function () {
        var workspaceConfig = this.tree.read('/angular.json');
        if (!workspaceConfig) {
            throw new schematics_api_exception_1.SchematicsApiException('Could not find Angular workspace configuration');
        }
        return JSON.parse(workspaceConfig.toString());
    };
    AngularApp.prototype.getDefaultProject = function () {
        var workspace = this.getWorkspace();
        return workspace.projects[workspace.defaultProject];
    };
    AngularApp.prototype.getAllProjects = function () {
        var _a;
        return (_a = this.getWorkspace()) === null || _a === void 0 ? void 0 : _a.projects;
    };
    AngularApp.prototype.getDefaultProjectRootModulePath = function () {
        return this.getRootModulePath(this.getDefaultProject());
    };
    AngularApp.prototype.getRootModulePath = function (project) {
        return ng_ast_utils_1.getAppModulePath(this.tree, this.getProjectMainFilePath(project));
    };
    AngularApp.prototype.getDefaultProjectMainFilePath = function () {
        return this.getProjectMainFilePath(this.getDefaultProject());
    };
    /** Looks for the main TypeScript file in the given project and returns its path. */
    AngularApp.prototype.getProjectMainFilePath = function (project) {
        return functions_1.getProjectMainFilePath(project);
    };
    /** Resolves the architect options for the build target of the given project. */
    AngularApp.prototype.getProjectTargetOptions = function (project, buildTarget) {
        return functions_1.getProjectTargetOptions(project, buildTarget);
    };
    /** Reads file given path and returns TypeScript source file. */
    AngularApp.prototype.getSourceFile = function (path) {
        return functions_1.getSourceFile(this.tree, path);
    };
    AngularApp.prototype.createHost = function () {
        return {
            read: function (path) {
                return __awaiter(this, void 0, void 0, function () {
                    var data;
                    return __generator(this, function (_a) {
                        data = this.tree.read(path);
                        if (!data) {
                            throw new schematics_api_exception_1.SchematicsApiException("File \"" + path + "\" couldn't be found.");
                        }
                        return [2 /*return*/, core_1.virtualFs.fileBufferToString(data)];
                    });
                });
            },
            write: function (path, data) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.tree.overwrite(path, data)];
                    });
                });
            },
        };
    };
    return AngularApp;
}());
exports.AngularApp = AngularApp;
