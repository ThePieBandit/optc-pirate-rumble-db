(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/cdk/overlay'), require('@angular/cdk/coercion'), require('@angular/cdk/keycodes'), require('@angular/animations'), require('@angular/cdk/a11y'), require('@angular/cdk/bidi'), require('@angular/cdk/portal')) :
    typeof define === 'function' && define.amd ? define('@material-extended/mde', ['exports', '@angular/core', '@angular/common', '@angular/cdk/overlay', '@angular/cdk/coercion', '@angular/cdk/keycodes', '@angular/animations', '@angular/cdk/a11y', '@angular/cdk/bidi', '@angular/cdk/portal'], factory) :
    (global = global || self, factory((global['material-extended'] = global['material-extended'] || {}, global['material-extended'].mde = {}), global.ng.core, global.ng.common, global.ng.cdk.overlay, global.ng.cdk.coercion, global.ng.cdk.keycodes, global.ng.animations, global.ng.cdk.a11y, global.ng.cdk.bidi, global.ng.cdk.portal));
}(this, (function (exports, core, common, overlay, coercion, keycodes, animations, a11y, bidi, portal) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * Throws an exception for the case when popover trigger doesn't have a valid mde-popover instance
     */
    function throwMdePopoverMissingError() {
        throw Error("mde-popover-trigger: must pass in an mde-popover instance.\n\n    Example:\n      <mde-popover #popover=\"mdePopover\"></mde-popover>\n      <button [mdePopoverTriggerFor]=\"popover\"></button>");
    }
    /**
     * Throws an exception for the case when popover's mdePopoverPositionX value isn't valid.
     * In other words, it doesn't match 'before' or 'after'.
     */
    function throwMdePopoverInvalidPositionX() {
        throw Error("mdePopoverPositionX value must be either 'before' or after'.\n      Example: <mde-popover mdePopoverPositionX=\"before\" #popover=\"mdePopover\"></mde-popover>");
    }
    /**
     * Throws an exception for the case when popover's mdePopoverPositionY value isn't valid.
     * In other words, it doesn't match 'above' or 'below'.
     */
    function throwMdePopoverInvalidPositionY() {
        throw Error("mdePopoverPositionY value must be either 'above' or below'.\n      Example: <mde-popover mdePopoverPositionY=\"above\" #popover=\"mdePopover\"></mde-popover>");
    }

    /**
     * Below are all the animations for the md-popover component.
     * Animation duration and timing values are based on AngularJS Material.
     */
    /**
     * This animation controls the popover panel's entry and exit from the page.
     *
     * When the popover panel is added to the DOM, it scales in and fades in its border.
     *
     * When the popover panel is removed from the DOM, it simply fades out after a brief
     * delay to display the ripple.
     */
    var transformPopover = animations.trigger('transformPopover', [
        animations.state('enter', animations.style({
            opacity: 1,
            transform: "scale(1)"
        })),
        animations.transition('void => *', [
            animations.style({
                opacity: 0,
                transform: "scale(0)"
            }),
            animations.animate("200ms cubic-bezier(0.25, 0.8, 0.25, 1)")
        ]),
        animations.transition('* => void', [
            animations.animate('50ms 100ms linear', animations.style({ opacity: 0 }))
        ])
    ]);

    var MdePopover = /** @class */ (function () {
        function MdePopover(_elementRef, zone) {
            this._elementRef = _elementRef;
            this.zone = zone;
            this.role = 'dialog';
            /** Settings for popover, view setters and getters for more detail */
            this._positionX = 'after';
            this._positionY = 'below';
            this._triggerEvent = 'hover';
            this._enterDelay = 200;
            this._leaveDelay = 200;
            this._overlapTrigger = true;
            this._disableAnimation = false;
            this._targetOffsetX = 0;
            this._targetOffsetY = 0;
            this._arrowOffsetX = 20;
            this._arrowWidth = 8;
            this._arrowColor = 'rgba(0, 0, 0, 0.12)';
            this._closeOnClick = true;
            this._focusTrapEnabled = true;
            this._focusTrapAutoCaptureEnabled = true;
            /** Config object to be passed into the popover's ngClass */
            this._classList = {};
            // TODO: Write comment description
            /** */
            this.containerPositioning = false;
            /** Closing disabled on popover */
            this.closeDisabled = false;
            /** Emits the current animation state whenever it changes. */
            this._onAnimationStateChange = new core.EventEmitter();
            /** Event emitted when the popover is closed. */
            this.close = new core.EventEmitter();
            this.setPositionClasses();
        }
        Object.defineProperty(MdePopover.prototype, "positionX", {
            /** Position of the popover in the X axis. */
            get: function () { return this._positionX; },
            set: function (value) {
                if (value !== 'before' && value !== 'after') {
                    throwMdePopoverInvalidPositionX();
                }
                this._positionX = value;
                this.setPositionClasses();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "positionY", {
            /** Position of the popover in the Y axis. */
            get: function () { return this._positionY; },
            set: function (value) {
                if (value !== 'above' && value !== 'below') {
                    throwMdePopoverInvalidPositionY();
                }
                this._positionY = value;
                this.setPositionClasses();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "triggerEvent", {
            /** Popover trigger event */
            get: function () { return this._triggerEvent; },
            set: function (value) { this._triggerEvent = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "enterDelay", {
            /** Popover enter delay */
            get: function () { return this._enterDelay; },
            set: function (value) { this._enterDelay = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "leaveDelay", {
            /** Popover leave delay */
            get: function () { return this._leaveDelay; },
            set: function (value) { this._leaveDelay = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "overlapTrigger", {
            /** Popover overlap trigger */
            get: function () { return this._overlapTrigger; },
            set: function (value) { this._overlapTrigger = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "targetOffsetX", {
            /** Popover target offset x */
            get: function () { return this._targetOffsetX; },
            set: function (value) { this._targetOffsetX = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "targetOffsetY", {
            /** Popover target offset y */
            get: function () { return this._targetOffsetY; },
            set: function (value) { this._targetOffsetY = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "arrowOffsetX", {
            /** Popover arrow offset x */
            get: function () { return this._arrowOffsetX; },
            set: function (value) { this._arrowOffsetX = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "arrowWidth", {
            /** Popover arrow width */
            get: function () { return this._arrowWidth; },
            set: function (value) { this._arrowWidth = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "arrowColor", {
            /** Popover arrow color */
            get: function () { return this._arrowColor; },
            set: function (value) { this._arrowColor = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "closeOnClick", {
            /**
             * Popover container close on click
             * default: true
             */
            get: function () { return this._closeOnClick; },
            set: function (value) { this._closeOnClick = coercion.coerceBooleanProperty(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "disableAnimation", {
            /**
             * Disable animations of popover and all child elements
             * default: false
             */
            get: function () { return this._disableAnimation; },
            set: function (value) { this._disableAnimation = coercion.coerceBooleanProperty(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "focusTrapEnabled", {
            /**
             * Popover focus trap using cdkTrapFocus
             * default: true
             */
            get: function () { return this._focusTrapEnabled; },
            set: function (value) { this._focusTrapEnabled = coercion.coerceBooleanProperty(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "focusTrapAutoCaptureEnabled", {
            /**
             * Popover focus trap auto capture using cdkTrapFocusAutoCapture
             * default: true
             */
            get: function () { return this._focusTrapAutoCaptureEnabled; },
            set: function (value) { this._focusTrapAutoCaptureEnabled = coercion.coerceBooleanProperty(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "panelClass", {
            /**
             * This method takes classes set on the host md-popover element and applies them on the
             * popover template that displays in the overlay container.  Otherwise, it's difficult
             * to style the containing popover from outside the component.
             * @param classes list of class names
             */
            set: function (classes) {
                if (classes && classes.length) {
                    this._classList = classes.split(' ').reduce(function (obj, className) {
                        obj[className] = true;
                        return obj;
                    }, {});
                    this._elementRef.nativeElement.className = '';
                    this.setPositionClasses();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdePopover.prototype, "classList", {
            /**
             * This method takes classes set on the host md-popover element and applies them on the
             * popover template that displays in the overlay container.  Otherwise, it's difficult
             * to style the containing popover from outside the component.
             * @deprecated Use `panelClass` instead.
             */
            get: function () { return this.panelClass; },
            set: function (classes) { this.panelClass = classes; },
            enumerable: true,
            configurable: true
        });
        MdePopover.prototype.ngOnDestroy = function () {
            this._emitCloseEvent();
            this.close.complete();
        };
        /** Handle a keyboard event from the popover, delegating to the appropriate action. */
        MdePopover.prototype._handleKeydown = function (event) {
            switch (event.keyCode) {
                case keycodes.ESCAPE:
                    this._emitCloseEvent();
                    return;
            }
        };
        /**
         * This emits a close event to which the trigger is subscribed. When emitted, the
         * trigger will close the popover.
         */
        MdePopover.prototype._emitCloseEvent = function () {
            this.close.emit();
        };
        /** Close popover on click if closeOnClick is true */
        MdePopover.prototype.onClick = function () {
            if (this.closeOnClick) {
                this._emitCloseEvent();
            }
        };
        /**
         * TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.
         * https://github.com/angular/material2/pull/5493#issuecomment-313085323
         */
        /** Disables close of popover when leaving trigger element and mouse over the popover */
        MdePopover.prototype.onMouseOver = function () {
            if (this.triggerEvent === 'hover') {
                this.closeDisabled = true;
            }
        };
        /** Enables close of popover when mouse leaving popover element */
        MdePopover.prototype.onMouseLeave = function () {
            if (this.triggerEvent === 'hover') {
                this.closeDisabled = false;
                this._emitCloseEvent();
            }
        };
        // TODO: Refactor how styles are set and updated on the component, use best practices.
        // TODO: If arrow left and right positioning is requested, see if flex direction can be used to work with order.
        /** Sets the current styles for the popover to allow for dynamically changing settings */
        MdePopover.prototype.setCurrentStyles = function () {
            // TODO: See if arrow position can be calculated automatically and allow override.
            // TODO: See if flex order is a better alternative to position arrow top or bottom.
            this.popoverArrowStyles = {
                'right': this.positionX === 'before' ? (this.arrowOffsetX - this.arrowWidth) + 'px' : '',
                'left': this.positionX === 'after' ? (this.arrowOffsetX - this.arrowWidth) + 'px' : '',
                'border-top': this.positionY === 'below' ?
                    this.arrowWidth + 'px solid ' + this.arrowColor : '0px solid transparent',
                'border-right': 'undefined' === undefined ?
                    this.arrowWidth + 'px solid ' + this.arrowColor :
                    this.arrowWidth + 'px solid transparent',
                'border-bottom': this.positionY === 'above' ?
                    this.arrowWidth + 'px solid ' + this.arrowColor :
                    this.arrowWidth + 'px solid transparent',
                'border-left': 'undefined' === undefined ?
                    this.arrowWidth + 'px solid ' + this.arrowColor :
                    this.arrowWidth + 'px solid transparent',
            };
            // TODO: Remove if flex order is added.
            this.popoverContentStyles = {
                'padding-top': this.overlapTrigger === true ? '0px' : this.arrowWidth + 'px',
                'padding-bottom': this.overlapTrigger === true ? '0px' : (this.arrowWidth) + 'px',
                'margin-top': this.overlapTrigger === false && this.positionY === 'below' && this.containerPositioning === false ?
                    -(this.arrowWidth * 2) + 'px' : '0px'
            };
        };
        /**
         * It's necessary to set position-based classes to ensure the popover panel animation
         * folds out from the correct direction.
         */
        MdePopover.prototype.setPositionClasses = function (posX, posY) {
            if (posX === void 0) { posX = this.positionX; }
            if (posY === void 0) { posY = this.positionY; }
            this._classList['mde-popover-before'] = posX === 'before';
            this._classList['mde-popover-after'] = posX === 'after';
            this._classList['mde-popover-above'] = posY === 'above';
            this._classList['mde-popover-below'] = posY === 'below';
        };
        MdePopover.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.NgZone }
        ]; };
        __decorate([
            core.HostBinding('attr.role')
        ], MdePopover.prototype, "role", void 0);
        __decorate([
            core.Input('mdePopoverPositionX')
        ], MdePopover.prototype, "positionX", null);
        __decorate([
            core.Input('mdePopoverPositionY')
        ], MdePopover.prototype, "positionY", null);
        __decorate([
            core.Input('mdePopoverTriggerOn')
        ], MdePopover.prototype, "triggerEvent", null);
        __decorate([
            core.Input('mdePopoverEnterDelay')
        ], MdePopover.prototype, "enterDelay", null);
        __decorate([
            core.Input('mdePopoverLeaveDelay')
        ], MdePopover.prototype, "leaveDelay", null);
        __decorate([
            core.Input('mdePopoverOverlapTrigger')
        ], MdePopover.prototype, "overlapTrigger", null);
        __decorate([
            core.Input('mdePopoverOffsetX')
        ], MdePopover.prototype, "targetOffsetX", null);
        __decorate([
            core.Input('mdePopoverOffsetY')
        ], MdePopover.prototype, "targetOffsetY", null);
        __decorate([
            core.Input('mdePopoverArrowOffsetX')
        ], MdePopover.prototype, "arrowOffsetX", null);
        __decorate([
            core.Input('mdePopoverArrowWidth')
        ], MdePopover.prototype, "arrowWidth", null);
        __decorate([
            core.Input('mdePopoverArrowColor')
        ], MdePopover.prototype, "arrowColor", null);
        __decorate([
            core.Input('mdePopoverCloseOnClick')
        ], MdePopover.prototype, "closeOnClick", null);
        __decorate([
            core.Input('mdePopoverDisableAnimation')
        ], MdePopover.prototype, "disableAnimation", null);
        __decorate([
            core.Input('mdeFocusTrapEnabled')
        ], MdePopover.prototype, "focusTrapEnabled", null);
        __decorate([
            core.Input('mdeFocusTrapAutoCaptureEnabled')
        ], MdePopover.prototype, "focusTrapAutoCaptureEnabled", null);
        __decorate([
            core.Input('class')
        ], MdePopover.prototype, "panelClass", null);
        __decorate([
            core.Input()
        ], MdePopover.prototype, "classList", null);
        __decorate([
            core.Output()
        ], MdePopover.prototype, "close", void 0);
        __decorate([
            core.ViewChild(core.TemplateRef)
        ], MdePopover.prototype, "templateRef", void 0);
        MdePopover = __decorate([
            core.Component({
                selector: 'mde-popover',
                template: "<ng-template>\n  <div class=\"mde-popover-panel\" role=\"dialog\" [class.mde-popover-overlap]=\"overlapTrigger\"\n       [ngClass]=\"_classList\" [ngStyle]=\"popoverPanelStyles\" (keydown)=\"_handleKeydown($event)\"\n       (click)=\"onClick()\" (mouseover)=\"onMouseOver()\" (mouseleave)=\"onMouseLeave()\" [@.disabled]=\"disableAnimation\"\n       [@transformPopover]=\"'enter'\">\n    <div class=\"mde-popover-direction-arrow\" [ngStyle]=\"popoverArrowStyles\" *ngIf=\"!overlapTrigger\"></div>\n    <div class=\"mde-popover-content\" [ngStyle]=\"popoverContentStyles\" [cdkTrapFocus]=\"focusTrapEnabled\" [cdkTrapFocusAutoCapture]=\"focusTrapAutoCaptureEnabled\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                encapsulation: core.ViewEncapsulation.None,
                animations: [
                    transformPopover
                ],
                exportAs: 'mdePopover',
                styles: [".mde-popover-panel{display:flex;flex-direction:column;max-height:calc(100vh + 48px)}.mde-popover-ripple{position:absolute;top:0;left:0;bottom:0;right:0}.mde-popover-below .mde-popover-direction-arrow{position:absolute;bottom:0;width:0;height:0;border-bottom-width:0!important;z-index:99999}.mde-popover-above .mde-popover-direction-arrow{position:absolute;top:0;width:0;height:0;border-top-width:0!important;z-index:99999}.mde-popover-after .mde-popover-direction-arrow{left:20px}.mde-popover-before .mde-popover-direction-arrow{right:20px}"]
            })
        ], MdePopover);
        return MdePopover;
    }());

    /**
     * This directive is intended to be used in conjunction with an mde-popover tag. It is
     * responsible for toggling the display of the provided popover instance.
     */
    var MdePopoverTrigger = /** @class */ (function () {
        function MdePopoverTrigger(_overlay, _elementRef, _viewContainerRef, _dir, _changeDetectorRef) {
            this._overlay = _overlay;
            this._elementRef = _elementRef;
            this._viewContainerRef = _viewContainerRef;
            this._dir = _dir;
            this._changeDetectorRef = _changeDetectorRef;
            this.ariaHaspopup = true;
            this._overlayRef = null;
            this._popoverOpen = false;
            this._halt = false;
            // tracking input type is necessary so it's possible to only auto-focus
            // the first item of the list when the popover is opened via the keyboard
            this._openedByMouse = false;
            /** Popover backdrop close on click */
            this.backdropCloseOnClick = true;
            /** Event emitted when the associated popover is opened. */
            this.opened = new core.EventEmitter();
            /** Event emitted when the associated popover is closed. */
            this.closed = new core.EventEmitter();
        }
        MdePopoverTrigger.prototype.ngAfterViewInit = function () {
            var _this = this;
            this._checkPopover();
            this._setCurrentConfig();
            this.popover.close.subscribe(function () { return _this.closePopover(); });
        };
        MdePopoverTrigger.prototype.ngOnDestroy = function () { this.destroyPopover(); };
        MdePopoverTrigger.prototype._setCurrentConfig = function () {
            if (this.positionX === 'before' || this.positionX === 'after') {
                this.popover.positionX = this.positionX;
            }
            if (this.positionY === 'above' || this.positionY === 'below') {
                this.popover.positionY = this.positionY;
            }
            if (this.triggerEvent) {
                this.popover.triggerEvent = this.triggerEvent;
            }
            if (this.enterDelay) {
                this.popover.enterDelay = this.enterDelay;
            }
            if (this.leaveDelay) {
                this.popover.leaveDelay = this.leaveDelay;
            }
            if (this.overlapTrigger === true || this.overlapTrigger === false) {
                this.popover.overlapTrigger = this.overlapTrigger;
            }
            if (this.targetOffsetX) {
                this.popover.targetOffsetX = this.targetOffsetX;
            }
            if (this.targetOffsetY) {
                this.popover.targetOffsetY = this.targetOffsetY;
            }
            if (this.arrowOffsetX) {
                this.popover.arrowOffsetX = this.arrowOffsetX;
            }
            if (this.arrowWidth) {
                this.popover.arrowWidth = this.arrowWidth;
            }
            if (this.arrowColor) {
                this.popover.arrowColor = this.arrowColor;
            }
            if (this.closeOnClick === true || this.closeOnClick === false) {
                this.popover.closeOnClick = this.closeOnClick;
            }
            this.popover.setCurrentStyles();
        };
        Object.defineProperty(MdePopoverTrigger.prototype, "popoverOpen", {
            /** Whether the popover is open. */
            get: function () { return this._popoverOpen; },
            enumerable: true,
            configurable: true
        });
        MdePopoverTrigger.prototype.onClick = function (event) {
            if (this.popover.triggerEvent === 'click') {
                // this.popover.setCurrentStyles();
                // this._setCurrentConfig();
                this.togglePopover();
            }
        };
        MdePopoverTrigger.prototype.onMouseEnter = function (event) {
            var _this = this;
            this._halt = false;
            if (this.popover.triggerEvent === 'hover') {
                this._mouseoverTimer = setTimeout(function () {
                    _this.openPopover();
                }, this.popover.enterDelay);
            }
        };
        MdePopoverTrigger.prototype.onMouseLeave = function (event) {
            var _this = this;
            if (this.popover.triggerEvent === 'hover') {
                if (this._mouseoverTimer) {
                    clearTimeout(this._mouseoverTimer);
                    this._mouseoverTimer = null;
                }
                if (this._popoverOpen) {
                    setTimeout(function () {
                        if (!_this.popover.closeDisabled) {
                            _this.closePopover();
                        }
                    }, this.popover.leaveDelay);
                }
                else {
                    this._halt = true;
                }
            }
        };
        /** Toggles the popover between the open and closed states. */
        MdePopoverTrigger.prototype.togglePopover = function () {
            return this._popoverOpen ? this.closePopover() : this.openPopover();
        };
        /** Opens the popover. */
        MdePopoverTrigger.prototype.openPopover = function () {
            if (!this._popoverOpen && !this._halt) {
                this._createOverlay().attach(this._portal);
                /** Only subscribe to backdrop if trigger event is click */
                if (this.triggerEvent === 'click' && this.backdropCloseOnClick === true) {
                    this._subscribeToBackdrop();
                }
                this._initPopover();
            }
        };
        /** Closes the popover. */
        MdePopoverTrigger.prototype.closePopover = function () {
            if (this._overlayRef) {
                this._overlayRef.detach();
                /** Only unsubscribe to backdrop if trigger event is click */
                if (this.triggerEvent === 'click' && this.backdropCloseOnClick === true) {
                    this._backdropSubscription.unsubscribe();
                }
                this._resetPopover();
            }
        };
        /** Removes the popover from the DOM. */
        MdePopoverTrigger.prototype.destroyPopover = function () {
            if (this._mouseoverTimer) {
                clearTimeout(this._mouseoverTimer);
                this._mouseoverTimer = null;
            }
            if (this._overlayRef) {
                this._overlayRef.dispose();
                this._overlayRef = null;
                this._cleanUpSubscriptions();
            }
        };
        /** Focuses the popover trigger. */
        MdePopoverTrigger.prototype.focus = function () {
            this._elementRef.nativeElement.focus();
        };
        Object.defineProperty(MdePopoverTrigger.prototype, "dir", {
            /** The text direction of the containing app. */
            get: function () {
                return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
            },
            enumerable: true,
            configurable: true
        });
        /**
        * This method ensures that the popover closes when the overlay backdrop is clicked.
        * We do not use first() here because doing so would not catch clicks from within
        * the popover, and it would fail to unsubscribe properly. Instead, we unsubscribe
        * explicitly when the popover is closed or destroyed.
        */
        MdePopoverTrigger.prototype._subscribeToBackdrop = function () {
            var _this = this;
            if (this._overlayRef) {
                this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function () {
                    _this.popover._emitCloseEvent();
                });
            }
        };
        /**
        * This method sets the popover state to open and focuses the first item if
        * the popover was opened via the keyboard.
        */
        MdePopoverTrigger.prototype._initPopover = function () {
            this._setIsPopoverOpen(true);
        };
        /**
        * This method resets the popover when it's closed, most importantly restoring
        * focus to the popover trigger if the popover was opened via the keyboard.
        */
        MdePopoverTrigger.prototype._resetPopover = function () {
            this._setIsPopoverOpen(false);
            // Focus only needs to be reset to the host element if the popover was opened
            // by the keyboard and manually shifted to the first popover item.
            if (!this._openedByMouse) {
                this.focus();
            }
            this._openedByMouse = false;
        };
        /** set state rather than toggle to support triggers sharing a popover */
        MdePopoverTrigger.prototype._setIsPopoverOpen = function (isOpen) {
            this._popoverOpen = isOpen;
            this._popoverOpen ? this.opened.emit() : this.closed.emit();
        };
        /**
        *  This method checks that a valid instance of MdPopover has been passed into
        *  mdPopoverTriggerFor. If not, an exception is thrown.
        */
        MdePopoverTrigger.prototype._checkPopover = function () {
            if (!this.popover) {
                throwMdePopoverMissingError();
            }
        };
        /**
        *  This method creates the overlay from the provided popover's template and saves its
        *  OverlayRef so that it can be attached to the DOM when openPopover is called.
        */
        MdePopoverTrigger.prototype._createOverlay = function () {
            if (!this._overlayRef) {
                this._portal = new portal.TemplatePortal(this.popover.templateRef, this._viewContainerRef);
                var config = this._getOverlayConfig();
                this._subscribeToPositions(config.positionStrategy);
                this._overlayRef = this._overlay.create(config);
            }
            return this._overlayRef;
        };
        /**
        * This method builds the configuration object needed to create the overlay, the OverlayConfig.
        * @returns OverlayConfig
        */
        MdePopoverTrigger.prototype._getOverlayConfig = function () {
            var overlayState = new overlay.OverlayConfig();
            overlayState.positionStrategy = this._getPosition();
            /** Display overlay backdrop if trigger event is click */
            if (this.triggerEvent === 'click') {
                overlayState.hasBackdrop = true;
                overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';
            }
            overlayState.direction = this.dir;
            overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();
            return overlayState;
        };
        /**
        * Listens to changes in the position of the overlay and sets the correct classes
        * on the popover based on the new position. This ensures the animation origin is always
        * correct, even if a fallback position is used for the overlay.
        */
        MdePopoverTrigger.prototype._subscribeToPositions = function (position) {
            var _this = this;
            this._positionSubscription = position.positionChanges.subscribe(function (change) {
                var posisionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';
                var posisionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';
                if (!_this.popover.overlapTrigger) {
                    posisionY = posisionY === 'below' ? 'above' : 'below';
                }
                // required for ChangeDetectionStrategy.OnPush
                _this._changeDetectorRef.markForCheck();
                _this.popover.zone.run(function () {
                    _this.popover.positionX = posisionX;
                    _this.popover.positionY = posisionY;
                    _this.popover.setCurrentStyles();
                    _this.popover.setPositionClasses(posisionX, posisionY);
                });
            });
        };
        /**
        * This method builds the position strategy for the overlay, so the popover is properly connected
        * to the trigger.
        * @returns ConnectedPositionStrategy
        */
        MdePopoverTrigger.prototype._getPosition = function () {
            var _a = __read(this.popover.positionX === 'before' ? ['end', 'start'] : ['start', 'end'], 2), originX = _a[0], originFallbackX = _a[1];
            var _b = __read(this.popover.positionY === 'above' ? ['bottom', 'top'] : ['top', 'bottom'], 2), overlayY = _b[0], overlayFallbackY = _b[1];
            // let originY = overlayY;
            // let fallbackOriginY = overlayFallbackY;
            var originY = overlayY;
            var originFallbackY = overlayFallbackY;
            var overlayX = originX;
            var overlayFallbackX = originFallbackX;
            // let [originY, originFallbackY] = [overlayY, overlayFallbackY];
            // let [overlayX, overlayFallbackX] = [originX, originFallbackX];
            /** Reverse overlayY and fallbackOverlayY when overlapTrigger is false */
            if (!this.popover.overlapTrigger) {
                originY = overlayY === 'top' ? 'bottom' : 'top';
                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';
            }
            var offsetX = 0;
            var offsetY = 0;
            if (this.popover.targetOffsetX && !isNaN(Number(this.popover.targetOffsetX))) {
                offsetX = Number(this.popover.targetOffsetX);
                // offsetX = -16;
            }
            if (this.popover.targetOffsetY && !isNaN(Number(this.popover.targetOffsetY))) {
                offsetY = Number(this.popover.targetOffsetY);
                // offsetY = -10;
            }
            /**
             * For overriding position element, when mdePopoverTargetAt has a valid element reference.
             * Useful for sticking popover to parent element and offsetting arrow to trigger element.
             * If undefined defaults to the trigger element reference.
             */
            var element = this._elementRef;
            if (typeof this.targetElement !== 'undefined') {
                this.popover.containerPositioning = true;
                element = this.targetElement._elementRef;
            }
            return this._overlay.position()
                .flexibleConnectedTo(element)
                .withPositions([
                {
                    originX: originX,
                    originY: originY,
                    overlayX: overlayX,
                    overlayY: overlayY,
                    offsetY: offsetY
                },
                {
                    originX: originFallbackX,
                    originY: originY,
                    overlayX: overlayFallbackX,
                    overlayY: overlayY,
                    offsetY: offsetY
                },
                {
                    originX: originX,
                    originY: originFallbackY,
                    overlayX: overlayX,
                    overlayY: overlayFallbackY,
                    offsetY: -offsetY
                },
                {
                    originX: originFallbackX,
                    originY: originFallbackY,
                    overlayX: overlayFallbackX,
                    overlayY: overlayFallbackY,
                    offsetY: -offsetY
                }
            ])
                .withDefaultOffsetX(offsetX)
                .withDefaultOffsetY(offsetY);
            /*
            return this._overlay.position()
              .connectedTo(element,
                  {originX: posX, originY: originY},
                  {overlayX: posX, overlayY: overlayY})
              .withFallbackPosition(
                  {originX: fallbackX, originY: originY},
                  {overlayX: fallbackX, overlayY: overlayY})
              .withFallbackPosition(
                  {originX: posX, originY: fallbackOriginY},
                  {overlayX: posX, overlayY: fallbackOverlayY})
              .withFallbackPosition(
                  {originX: fallbackX, originY: fallbackOriginY},
                  {overlayX: fallbackX, overlayY: fallbackOverlayY})
              .withOffsetX(offsetX)
              .withOffsetY(offsetY);
              */
        };
        MdePopoverTrigger.prototype._cleanUpSubscriptions = function () {
            if (this._backdropSubscription) {
                this._backdropSubscription.unsubscribe();
            }
            if (this._positionSubscription) {
                this._positionSubscription.unsubscribe();
            }
        };
        MdePopoverTrigger.prototype._handleMousedown = function (event) {
            if (event && !a11y.isFakeMousedownFromScreenReader(event)) {
                this._openedByMouse = true;
            }
        };
        MdePopoverTrigger.ctorParameters = function () { return [
            { type: overlay.Overlay },
            { type: core.ElementRef },
            { type: core.ViewContainerRef },
            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.HostBinding('attr.aria-haspopup')
        ], MdePopoverTrigger.prototype, "ariaHaspopup", void 0);
        __decorate([
            core.Input('mdePopoverTriggerFor')
        ], MdePopoverTrigger.prototype, "popover", void 0);
        __decorate([
            core.Input('mdePopoverTargetAt')
        ], MdePopoverTrigger.prototype, "targetElement", void 0);
        __decorate([
            core.Input('mdePopoverPositionX')
        ], MdePopoverTrigger.prototype, "positionX", void 0);
        __decorate([
            core.Input('mdePopoverPositionY')
        ], MdePopoverTrigger.prototype, "positionY", void 0);
        __decorate([
            core.Input('mdePopoverTriggerOn')
        ], MdePopoverTrigger.prototype, "triggerEvent", void 0);
        __decorate([
            core.Input('mdePopoverEnterDelay')
        ], MdePopoverTrigger.prototype, "enterDelay", void 0);
        __decorate([
            core.Input('mdePopoverLeaveDelay')
        ], MdePopoverTrigger.prototype, "leaveDelay", void 0);
        __decorate([
            core.Input('mdePopoverOverlapTrigger')
        ], MdePopoverTrigger.prototype, "overlapTrigger", void 0);
        __decorate([
            core.Input('mdePopoverOffsetX')
        ], MdePopoverTrigger.prototype, "targetOffsetX", void 0);
        __decorate([
            core.Input('mdePopoverOffsetY')
        ], MdePopoverTrigger.prototype, "targetOffsetY", void 0);
        __decorate([
            core.Input('mdePopoverArrowOffsetX')
        ], MdePopoverTrigger.prototype, "arrowOffsetX", void 0);
        __decorate([
            core.Input('mdePopoverArrowWidth')
        ], MdePopoverTrigger.prototype, "arrowWidth", void 0);
        __decorate([
            core.Input('mdePopoverArrowColor')
        ], MdePopoverTrigger.prototype, "arrowColor", void 0);
        __decorate([
            core.Input('mdePopoverCloseOnClick')
        ], MdePopoverTrigger.prototype, "closeOnClick", void 0);
        __decorate([
            core.Input('mdePopoverBackdropCloseOnClick')
        ], MdePopoverTrigger.prototype, "backdropCloseOnClick", void 0);
        __decorate([
            core.Output()
        ], MdePopoverTrigger.prototype, "opened", void 0);
        __decorate([
            core.Output()
        ], MdePopoverTrigger.prototype, "closed", void 0);
        __decorate([
            core.HostListener('click', ['$event'])
        ], MdePopoverTrigger.prototype, "onClick", null);
        __decorate([
            core.HostListener('mouseenter', ['$event'])
        ], MdePopoverTrigger.prototype, "onMouseEnter", null);
        __decorate([
            core.HostListener('mouseleave', ['$event'])
        ], MdePopoverTrigger.prototype, "onMouseLeave", null);
        __decorate([
            core.HostListener('mousedown', ['$event'])
        ], MdePopoverTrigger.prototype, "_handleMousedown", null);
        MdePopoverTrigger = __decorate([
            core.Directive({
                selector: '[mdePopoverTriggerFor]',
                exportAs: 'mdePopoverTrigger'
            }),
            __param(3, core.Optional())
        ], MdePopoverTrigger);
        return MdePopoverTrigger;
    }());

    var MdePopoverTarget = /** @class */ (function () {
        function MdePopoverTarget(_elementRef) {
            this._elementRef = _elementRef;
        }
        MdePopoverTarget.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MdePopoverTarget = __decorate([
            core.Directive({
                selector: 'mde-popover-target, [mdePopoverTarget]',
                exportAs: 'mdePopoverTarget'
            })
        ], MdePopoverTarget);
        return MdePopoverTarget;
    }());

    var MdePopoverModule = /** @class */ (function () {
        function MdePopoverModule() {
        }
        MdePopoverModule = __decorate([
            core.NgModule({
                imports: [
                    overlay.OverlayModule,
                    common.CommonModule,
                    a11y.A11yModule
                ],
                exports: [MdePopover, MdePopoverTrigger, MdePopoverTarget],
                declarations: [MdePopover, MdePopoverTrigger, MdePopoverTarget],
            })
        ], MdePopoverModule);
        return MdePopoverModule;
    }());

    exports.MdePopover = MdePopover;
    exports.MdePopoverModule = MdePopoverModule;
    exports.MdePopoverTarget = MdePopoverTarget;
    exports.MdePopoverTrigger = MdePopoverTrigger;
    exports.transformPopover = transformPopover;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=material-extended-mde.umd.js.map
