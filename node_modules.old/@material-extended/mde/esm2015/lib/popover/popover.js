import { __decorate } from "tslib";
import { Component, EventEmitter, Input, OnDestroy, Output, TemplateRef, ViewChild, ViewEncapsulation, ElementRef, ChangeDetectionStrategy, HostBinding, NgZone } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ESCAPE } from '@angular/cdk/keycodes';
import { throwMdePopoverInvalidPositionX, throwMdePopoverInvalidPositionY } from './popover-errors';
import { transformPopover } from './popover-animations';
let MdePopover = class MdePopover {
    constructor(_elementRef, zone) {
        this._elementRef = _elementRef;
        this.zone = zone;
        this.role = 'dialog';
        /** Settings for popover, view setters and getters for more detail */
        this._positionX = 'after';
        this._positionY = 'below';
        this._triggerEvent = 'hover';
        this._enterDelay = 200;
        this._leaveDelay = 200;
        this._overlapTrigger = true;
        this._disableAnimation = false;
        this._targetOffsetX = 0;
        this._targetOffsetY = 0;
        this._arrowOffsetX = 20;
        this._arrowWidth = 8;
        this._arrowColor = 'rgba(0, 0, 0, 0.12)';
        this._closeOnClick = true;
        this._focusTrapEnabled = true;
        this._focusTrapAutoCaptureEnabled = true;
        /** Config object to be passed into the popover's ngClass */
        this._classList = {};
        // TODO: Write comment description
        /** */
        this.containerPositioning = false;
        /** Closing disabled on popover */
        this.closeDisabled = false;
        /** Emits the current animation state whenever it changes. */
        this._onAnimationStateChange = new EventEmitter();
        /** Event emitted when the popover is closed. */
        this.close = new EventEmitter();
        this.setPositionClasses();
    }
    /** Position of the popover in the X axis. */
    get positionX() { return this._positionX; }
    set positionX(value) {
        if (value !== 'before' && value !== 'after') {
            throwMdePopoverInvalidPositionX();
        }
        this._positionX = value;
        this.setPositionClasses();
    }
    /** Position of the popover in the Y axis. */
    get positionY() { return this._positionY; }
    set positionY(value) {
        if (value !== 'above' && value !== 'below') {
            throwMdePopoverInvalidPositionY();
        }
        this._positionY = value;
        this.setPositionClasses();
    }
    /** Popover trigger event */
    get triggerEvent() { return this._triggerEvent; }
    set triggerEvent(value) { this._triggerEvent = value; }
    /** Popover enter delay */
    get enterDelay() { return this._enterDelay; }
    set enterDelay(value) { this._enterDelay = value; }
    /** Popover leave delay */
    get leaveDelay() { return this._leaveDelay; }
    set leaveDelay(value) { this._leaveDelay = value; }
    /** Popover overlap trigger */
    get overlapTrigger() { return this._overlapTrigger; }
    set overlapTrigger(value) { this._overlapTrigger = value; }
    /** Popover target offset x */
    get targetOffsetX() { return this._targetOffsetX; }
    set targetOffsetX(value) { this._targetOffsetX = value; }
    /** Popover target offset y */
    get targetOffsetY() { return this._targetOffsetY; }
    set targetOffsetY(value) { this._targetOffsetY = value; }
    /** Popover arrow offset x */
    get arrowOffsetX() { return this._arrowOffsetX; }
    set arrowOffsetX(value) { this._arrowOffsetX = value; }
    /** Popover arrow width */
    get arrowWidth() { return this._arrowWidth; }
    set arrowWidth(value) { this._arrowWidth = value; }
    /** Popover arrow color */
    get arrowColor() { return this._arrowColor; }
    set arrowColor(value) { this._arrowColor = value; }
    /**
     * Popover container close on click
     * default: true
     */
    get closeOnClick() { return this._closeOnClick; }
    set closeOnClick(value) { this._closeOnClick = coerceBooleanProperty(value); }
    /**
     * Disable animations of popover and all child elements
     * default: false
     */
    get disableAnimation() { return this._disableAnimation; }
    set disableAnimation(value) { this._disableAnimation = coerceBooleanProperty(value); }
    /**
     * Popover focus trap using cdkTrapFocus
     * default: true
     */
    get focusTrapEnabled() { return this._focusTrapEnabled; }
    set focusTrapEnabled(value) { this._focusTrapEnabled = coerceBooleanProperty(value); }
    /**
     * Popover focus trap auto capture using cdkTrapFocusAutoCapture
     * default: true
     */
    get focusTrapAutoCaptureEnabled() { return this._focusTrapAutoCaptureEnabled; }
    set focusTrapAutoCaptureEnabled(value) { this._focusTrapAutoCaptureEnabled = coerceBooleanProperty(value); }
    /**
     * This method takes classes set on the host md-popover element and applies them on the
     * popover template that displays in the overlay container.  Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @param classes list of class names
     */
    set panelClass(classes) {
        if (classes && classes.length) {
            this._classList = classes.split(' ').reduce((obj, className) => {
                obj[className] = true;
                return obj;
            }, {});
            this._elementRef.nativeElement.className = '';
            this.setPositionClasses();
        }
    }
    /**
     * This method takes classes set on the host md-popover element and applies them on the
     * popover template that displays in the overlay container.  Otherwise, it's difficult
     * to style the containing popover from outside the component.
     * @deprecated Use `panelClass` instead.
     */
    get classList() { return this.panelClass; }
    set classList(classes) { this.panelClass = classes; }
    ngOnDestroy() {
        this._emitCloseEvent();
        this.close.complete();
    }
    /** Handle a keyboard event from the popover, delegating to the appropriate action. */
    _handleKeydown(event) {
        switch (event.keyCode) {
            case ESCAPE:
                this._emitCloseEvent();
                return;
        }
    }
    /**
     * This emits a close event to which the trigger is subscribed. When emitted, the
     * trigger will close the popover.
     */
    _emitCloseEvent() {
        this.close.emit();
    }
    /** Close popover on click if closeOnClick is true */
    onClick() {
        if (this.closeOnClick) {
            this._emitCloseEvent();
        }
    }
    /**
     * TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.
     * https://github.com/angular/material2/pull/5493#issuecomment-313085323
     */
    /** Disables close of popover when leaving trigger element and mouse over the popover */
    onMouseOver() {
        if (this.triggerEvent === 'hover') {
            this.closeDisabled = true;
        }
    }
    /** Enables close of popover when mouse leaving popover element */
    onMouseLeave() {
        if (this.triggerEvent === 'hover') {
            this.closeDisabled = false;
            this._emitCloseEvent();
        }
    }
    // TODO: Refactor how styles are set and updated on the component, use best practices.
    // TODO: If arrow left and right positioning is requested, see if flex direction can be used to work with order.
    /** Sets the current styles for the popover to allow for dynamically changing settings */
    setCurrentStyles() {
        // TODO: See if arrow position can be calculated automatically and allow override.
        // TODO: See if flex order is a better alternative to position arrow top or bottom.
        this.popoverArrowStyles = {
            'right': this.positionX === 'before' ? (this.arrowOffsetX - this.arrowWidth) + 'px' : '',
            'left': this.positionX === 'after' ? (this.arrowOffsetX - this.arrowWidth) + 'px' : '',
            'border-top': this.positionY === 'below' ?
                this.arrowWidth + 'px solid ' + this.arrowColor : '0px solid transparent',
            'border-right': 'undefined' === undefined ?
                this.arrowWidth + 'px solid ' + this.arrowColor :
                this.arrowWidth + 'px solid transparent',
            'border-bottom': this.positionY === 'above' ?
                this.arrowWidth + 'px solid ' + this.arrowColor :
                this.arrowWidth + 'px solid transparent',
            'border-left': 'undefined' === undefined ?
                this.arrowWidth + 'px solid ' + this.arrowColor :
                this.arrowWidth + 'px solid transparent',
        };
        // TODO: Remove if flex order is added.
        this.popoverContentStyles = {
            'padding-top': this.overlapTrigger === true ? '0px' : this.arrowWidth + 'px',
            'padding-bottom': this.overlapTrigger === true ? '0px' : (this.arrowWidth) + 'px',
            'margin-top': this.overlapTrigger === false && this.positionY === 'below' && this.containerPositioning === false ?
                -(this.arrowWidth * 2) + 'px' : '0px'
        };
    }
    /**
     * It's necessary to set position-based classes to ensure the popover panel animation
     * folds out from the correct direction.
     */
    setPositionClasses(posX = this.positionX, posY = this.positionY) {
        this._classList['mde-popover-before'] = posX === 'before';
        this._classList['mde-popover-after'] = posX === 'after';
        this._classList['mde-popover-above'] = posY === 'above';
        this._classList['mde-popover-below'] = posY === 'below';
    }
};
MdePopover.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
__decorate([
    HostBinding('attr.role')
], MdePopover.prototype, "role", void 0);
__decorate([
    Input('mdePopoverPositionX')
], MdePopover.prototype, "positionX", null);
__decorate([
    Input('mdePopoverPositionY')
], MdePopover.prototype, "positionY", null);
__decorate([
    Input('mdePopoverTriggerOn')
], MdePopover.prototype, "triggerEvent", null);
__decorate([
    Input('mdePopoverEnterDelay')
], MdePopover.prototype, "enterDelay", null);
__decorate([
    Input('mdePopoverLeaveDelay')
], MdePopover.prototype, "leaveDelay", null);
__decorate([
    Input('mdePopoverOverlapTrigger')
], MdePopover.prototype, "overlapTrigger", null);
__decorate([
    Input('mdePopoverOffsetX')
], MdePopover.prototype, "targetOffsetX", null);
__decorate([
    Input('mdePopoverOffsetY')
], MdePopover.prototype, "targetOffsetY", null);
__decorate([
    Input('mdePopoverArrowOffsetX')
], MdePopover.prototype, "arrowOffsetX", null);
__decorate([
    Input('mdePopoverArrowWidth')
], MdePopover.prototype, "arrowWidth", null);
__decorate([
    Input('mdePopoverArrowColor')
], MdePopover.prototype, "arrowColor", null);
__decorate([
    Input('mdePopoverCloseOnClick')
], MdePopover.prototype, "closeOnClick", null);
__decorate([
    Input('mdePopoverDisableAnimation')
], MdePopover.prototype, "disableAnimation", null);
__decorate([
    Input('mdeFocusTrapEnabled')
], MdePopover.prototype, "focusTrapEnabled", null);
__decorate([
    Input('mdeFocusTrapAutoCaptureEnabled')
], MdePopover.prototype, "focusTrapAutoCaptureEnabled", null);
__decorate([
    Input('class')
], MdePopover.prototype, "panelClass", null);
__decorate([
    Input()
], MdePopover.prototype, "classList", null);
__decorate([
    Output()
], MdePopover.prototype, "close", void 0);
__decorate([
    ViewChild(TemplateRef)
], MdePopover.prototype, "templateRef", void 0);
MdePopover = __decorate([
    Component({
        selector: 'mde-popover',
        template: "<ng-template>\n  <div class=\"mde-popover-panel\" role=\"dialog\" [class.mde-popover-overlap]=\"overlapTrigger\"\n       [ngClass]=\"_classList\" [ngStyle]=\"popoverPanelStyles\" (keydown)=\"_handleKeydown($event)\"\n       (click)=\"onClick()\" (mouseover)=\"onMouseOver()\" (mouseleave)=\"onMouseLeave()\" [@.disabled]=\"disableAnimation\"\n       [@transformPopover]=\"'enter'\">\n    <div class=\"mde-popover-direction-arrow\" [ngStyle]=\"popoverArrowStyles\" *ngIf=\"!overlapTrigger\"></div>\n    <div class=\"mde-popover-content\" [ngStyle]=\"popoverContentStyles\" [cdkTrapFocus]=\"focusTrapEnabled\" [cdkTrapFocusAutoCapture]=\"focusTrapAutoCaptureEnabled\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None,
        animations: [
            transformPopover
        ],
        exportAs: 'mdePopover',
        styles: [".mde-popover-panel{display:flex;flex-direction:column;max-height:calc(100vh + 48px)}.mde-popover-ripple{position:absolute;top:0;left:0;bottom:0;right:0}.mde-popover-below .mde-popover-direction-arrow{position:absolute;bottom:0;width:0;height:0;border-bottom-width:0!important;z-index:99999}.mde-popover-above .mde-popover-direction-arrow{position:absolute;top:0;width:0;height:0;border-top-width:0!important;z-index:99999}.mde-popover-after .mde-popover-direction-arrow{left:20px}.mde-popover-before .mde-popover-direction-arrow{right:20px}"]
    })
], MdePopover);
export { MdePopover };
//# sourceMappingURL=data:application/json;base64,