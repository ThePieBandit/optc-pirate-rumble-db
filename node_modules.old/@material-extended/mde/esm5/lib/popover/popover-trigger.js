import { __decorate, __param, __read } from "tslib";
import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, Optional, Output, ViewContainerRef, HostListener, HostBinding, ChangeDetectorRef, } from '@angular/core';
import { isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';
import { Direction, Directionality } from '@angular/cdk/bidi';
import { Overlay, OverlayRef, OverlayConfig, HorizontalConnectionPos, VerticalConnectionPos, FlexibleConnectedPositionStrategy } from '@angular/cdk/overlay';
import { TemplatePortal } from '@angular/cdk/portal';
import { throwMdePopoverMissingError } from './popover-errors';
/**
 * This directive is intended to be used in conjunction with an mde-popover tag. It is
 * responsible for toggling the display of the provided popover instance.
 */
var MdePopoverTrigger = /** @class */ (function () {
    function MdePopoverTrigger(_overlay, _elementRef, _viewContainerRef, _dir, _changeDetectorRef) {
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._dir = _dir;
        this._changeDetectorRef = _changeDetectorRef;
        this.ariaHaspopup = true;
        this._overlayRef = null;
        this._popoverOpen = false;
        this._halt = false;
        // tracking input type is necessary so it's possible to only auto-focus
        // the first item of the list when the popover is opened via the keyboard
        this._openedByMouse = false;
        /** Popover backdrop close on click */
        this.backdropCloseOnClick = true;
        /** Event emitted when the associated popover is opened. */
        this.opened = new EventEmitter();
        /** Event emitted when the associated popover is closed. */
        this.closed = new EventEmitter();
    }
    MdePopoverTrigger.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._checkPopover();
        this._setCurrentConfig();
        this.popover.close.subscribe(function () { return _this.closePopover(); });
    };
    MdePopoverTrigger.prototype.ngOnDestroy = function () { this.destroyPopover(); };
    MdePopoverTrigger.prototype._setCurrentConfig = function () {
        if (this.positionX === 'before' || this.positionX === 'after') {
            this.popover.positionX = this.positionX;
        }
        if (this.positionY === 'above' || this.positionY === 'below') {
            this.popover.positionY = this.positionY;
        }
        if (this.triggerEvent) {
            this.popover.triggerEvent = this.triggerEvent;
        }
        if (this.enterDelay) {
            this.popover.enterDelay = this.enterDelay;
        }
        if (this.leaveDelay) {
            this.popover.leaveDelay = this.leaveDelay;
        }
        if (this.overlapTrigger === true || this.overlapTrigger === false) {
            this.popover.overlapTrigger = this.overlapTrigger;
        }
        if (this.targetOffsetX) {
            this.popover.targetOffsetX = this.targetOffsetX;
        }
        if (this.targetOffsetY) {
            this.popover.targetOffsetY = this.targetOffsetY;
        }
        if (this.arrowOffsetX) {
            this.popover.arrowOffsetX = this.arrowOffsetX;
        }
        if (this.arrowWidth) {
            this.popover.arrowWidth = this.arrowWidth;
        }
        if (this.arrowColor) {
            this.popover.arrowColor = this.arrowColor;
        }
        if (this.closeOnClick === true || this.closeOnClick === false) {
            this.popover.closeOnClick = this.closeOnClick;
        }
        this.popover.setCurrentStyles();
    };
    Object.defineProperty(MdePopoverTrigger.prototype, "popoverOpen", {
        /** Whether the popover is open. */
        get: function () { return this._popoverOpen; },
        enumerable: true,
        configurable: true
    });
    MdePopoverTrigger.prototype.onClick = function (event) {
        if (this.popover.triggerEvent === 'click') {
            // this.popover.setCurrentStyles();
            // this._setCurrentConfig();
            this.togglePopover();
        }
    };
    MdePopoverTrigger.prototype.onMouseEnter = function (event) {
        var _this = this;
        this._halt = false;
        if (this.popover.triggerEvent === 'hover') {
            this._mouseoverTimer = setTimeout(function () {
                _this.openPopover();
            }, this.popover.enterDelay);
        }
    };
    MdePopoverTrigger.prototype.onMouseLeave = function (event) {
        var _this = this;
        if (this.popover.triggerEvent === 'hover') {
            if (this._mouseoverTimer) {
                clearTimeout(this._mouseoverTimer);
                this._mouseoverTimer = null;
            }
            if (this._popoverOpen) {
                setTimeout(function () {
                    if (!_this.popover.closeDisabled) {
                        _this.closePopover();
                    }
                }, this.popover.leaveDelay);
            }
            else {
                this._halt = true;
            }
        }
    };
    /** Toggles the popover between the open and closed states. */
    MdePopoverTrigger.prototype.togglePopover = function () {
        return this._popoverOpen ? this.closePopover() : this.openPopover();
    };
    /** Opens the popover. */
    MdePopoverTrigger.prototype.openPopover = function () {
        if (!this._popoverOpen && !this._halt) {
            this._createOverlay().attach(this._portal);
            /** Only subscribe to backdrop if trigger event is click */
            if (this.triggerEvent === 'click' && this.backdropCloseOnClick === true) {
                this._subscribeToBackdrop();
            }
            this._initPopover();
        }
    };
    /** Closes the popover. */
    MdePopoverTrigger.prototype.closePopover = function () {
        if (this._overlayRef) {
            this._overlayRef.detach();
            /** Only unsubscribe to backdrop if trigger event is click */
            if (this.triggerEvent === 'click' && this.backdropCloseOnClick === true) {
                this._backdropSubscription.unsubscribe();
            }
            this._resetPopover();
        }
    };
    /** Removes the popover from the DOM. */
    MdePopoverTrigger.prototype.destroyPopover = function () {
        if (this._mouseoverTimer) {
            clearTimeout(this._mouseoverTimer);
            this._mouseoverTimer = null;
        }
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
            this._cleanUpSubscriptions();
        }
    };
    /** Focuses the popover trigger. */
    MdePopoverTrigger.prototype.focus = function () {
        this._elementRef.nativeElement.focus();
    };
    Object.defineProperty(MdePopoverTrigger.prototype, "dir", {
        /** The text direction of the containing app. */
        get: function () {
            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
        },
        enumerable: true,
        configurable: true
    });
    /**
    * This method ensures that the popover closes when the overlay backdrop is clicked.
    * We do not use first() here because doing so would not catch clicks from within
    * the popover, and it would fail to unsubscribe properly. Instead, we unsubscribe
    * explicitly when the popover is closed or destroyed.
    */
    MdePopoverTrigger.prototype._subscribeToBackdrop = function () {
        var _this = this;
        if (this._overlayRef) {
            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function () {
                _this.popover._emitCloseEvent();
            });
        }
    };
    /**
    * This method sets the popover state to open and focuses the first item if
    * the popover was opened via the keyboard.
    */
    MdePopoverTrigger.prototype._initPopover = function () {
        this._setIsPopoverOpen(true);
    };
    /**
    * This method resets the popover when it's closed, most importantly restoring
    * focus to the popover trigger if the popover was opened via the keyboard.
    */
    MdePopoverTrigger.prototype._resetPopover = function () {
        this._setIsPopoverOpen(false);
        // Focus only needs to be reset to the host element if the popover was opened
        // by the keyboard and manually shifted to the first popover item.
        if (!this._openedByMouse) {
            this.focus();
        }
        this._openedByMouse = false;
    };
    /** set state rather than toggle to support triggers sharing a popover */
    MdePopoverTrigger.prototype._setIsPopoverOpen = function (isOpen) {
        this._popoverOpen = isOpen;
        this._popoverOpen ? this.opened.emit() : this.closed.emit();
    };
    /**
    *  This method checks that a valid instance of MdPopover has been passed into
    *  mdPopoverTriggerFor. If not, an exception is thrown.
    */
    MdePopoverTrigger.prototype._checkPopover = function () {
        if (!this.popover) {
            throwMdePopoverMissingError();
        }
    };
    /**
    *  This method creates the overlay from the provided popover's template and saves its
    *  OverlayRef so that it can be attached to the DOM when openPopover is called.
    */
    MdePopoverTrigger.prototype._createOverlay = function () {
        if (!this._overlayRef) {
            this._portal = new TemplatePortal(this.popover.templateRef, this._viewContainerRef);
            var config = this._getOverlayConfig();
            this._subscribeToPositions(config.positionStrategy);
            this._overlayRef = this._overlay.create(config);
        }
        return this._overlayRef;
    };
    /**
    * This method builds the configuration object needed to create the overlay, the OverlayConfig.
    * @returns OverlayConfig
    */
    MdePopoverTrigger.prototype._getOverlayConfig = function () {
        var overlayState = new OverlayConfig();
        overlayState.positionStrategy = this._getPosition();
        /** Display overlay backdrop if trigger event is click */
        if (this.triggerEvent === 'click') {
            overlayState.hasBackdrop = true;
            overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';
        }
        overlayState.direction = this.dir;
        overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();
        return overlayState;
    };
    /**
    * Listens to changes in the position of the overlay and sets the correct classes
    * on the popover based on the new position. This ensures the animation origin is always
    * correct, even if a fallback position is used for the overlay.
    */
    MdePopoverTrigger.prototype._subscribeToPositions = function (position) {
        var _this = this;
        this._positionSubscription = position.positionChanges.subscribe(function (change) {
            var posisionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';
            var posisionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';
            if (!_this.popover.overlapTrigger) {
                posisionY = posisionY === 'below' ? 'above' : 'below';
            }
            // required for ChangeDetectionStrategy.OnPush
            _this._changeDetectorRef.markForCheck();
            _this.popover.zone.run(function () {
                _this.popover.positionX = posisionX;
                _this.popover.positionY = posisionY;
                _this.popover.setCurrentStyles();
                _this.popover.setPositionClasses(posisionX, posisionY);
            });
        });
    };
    /**
    * This method builds the position strategy for the overlay, so the popover is properly connected
    * to the trigger.
    * @returns ConnectedPositionStrategy
    */
    MdePopoverTrigger.prototype._getPosition = function () {
        var _a = __read(this.popover.positionX === 'before' ? ['end', 'start'] : ['start', 'end'], 2), originX = _a[0], originFallbackX = _a[1];
        var _b = __read(this.popover.positionY === 'above' ? ['bottom', 'top'] : ['top', 'bottom'], 2), overlayY = _b[0], overlayFallbackY = _b[1];
        // let originY = overlayY;
        // let fallbackOriginY = overlayFallbackY;
        var originY = overlayY;
        var originFallbackY = overlayFallbackY;
        var overlayX = originX;
        var overlayFallbackX = originFallbackX;
        // let [originY, originFallbackY] = [overlayY, overlayFallbackY];
        // let [overlayX, overlayFallbackX] = [originX, originFallbackX];
        /** Reverse overlayY and fallbackOverlayY when overlapTrigger is false */
        if (!this.popover.overlapTrigger) {
            originY = overlayY === 'top' ? 'bottom' : 'top';
            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';
        }
        var offsetX = 0;
        var offsetY = 0;
        if (this.popover.targetOffsetX && !isNaN(Number(this.popover.targetOffsetX))) {
            offsetX = Number(this.popover.targetOffsetX);
            // offsetX = -16;
        }
        if (this.popover.targetOffsetY && !isNaN(Number(this.popover.targetOffsetY))) {
            offsetY = Number(this.popover.targetOffsetY);
            // offsetY = -10;
        }
        /**
         * For overriding position element, when mdePopoverTargetAt has a valid element reference.
         * Useful for sticking popover to parent element and offsetting arrow to trigger element.
         * If undefined defaults to the trigger element reference.
         */
        var element = this._elementRef;
        if (typeof this.targetElement !== 'undefined') {
            this.popover.containerPositioning = true;
            element = this.targetElement._elementRef;
        }
        return this._overlay.position()
            .flexibleConnectedTo(element)
            .withPositions([
            {
                originX: originX,
                originY: originY,
                overlayX: overlayX,
                overlayY: overlayY,
                offsetY: offsetY
            },
            {
                originX: originFallbackX,
                originY: originY,
                overlayX: overlayFallbackX,
                overlayY: overlayY,
                offsetY: offsetY
            },
            {
                originX: originX,
                originY: originFallbackY,
                overlayX: overlayX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY
            },
            {
                originX: originFallbackX,
                originY: originFallbackY,
                overlayX: overlayFallbackX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY
            }
        ])
            .withDefaultOffsetX(offsetX)
            .withDefaultOffsetY(offsetY);
        /*
        return this._overlay.position()
          .connectedTo(element,
              {originX: posX, originY: originY},
              {overlayX: posX, overlayY: overlayY})
          .withFallbackPosition(
              {originX: fallbackX, originY: originY},
              {overlayX: fallbackX, overlayY: overlayY})
          .withFallbackPosition(
              {originX: posX, originY: fallbackOriginY},
              {overlayX: posX, overlayY: fallbackOverlayY})
          .withFallbackPosition(
              {originX: fallbackX, originY: fallbackOriginY},
              {overlayX: fallbackX, overlayY: fallbackOverlayY})
          .withOffsetX(offsetX)
          .withOffsetY(offsetY);
          */
    };
    MdePopoverTrigger.prototype._cleanUpSubscriptions = function () {
        if (this._backdropSubscription) {
            this._backdropSubscription.unsubscribe();
        }
        if (this._positionSubscription) {
            this._positionSubscription.unsubscribe();
        }
    };
    MdePopoverTrigger.prototype._handleMousedown = function (event) {
        if (event && !isFakeMousedownFromScreenReader(event)) {
            this._openedByMouse = true;
        }
    };
    MdePopoverTrigger.ctorParameters = function () { return [
        { type: Overlay },
        { type: ElementRef },
        { type: ViewContainerRef },
        { type: Directionality, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        HostBinding('attr.aria-haspopup')
    ], MdePopoverTrigger.prototype, "ariaHaspopup", void 0);
    __decorate([
        Input('mdePopoverTriggerFor')
    ], MdePopoverTrigger.prototype, "popover", void 0);
    __decorate([
        Input('mdePopoverTargetAt')
    ], MdePopoverTrigger.prototype, "targetElement", void 0);
    __decorate([
        Input('mdePopoverPositionX')
    ], MdePopoverTrigger.prototype, "positionX", void 0);
    __decorate([
        Input('mdePopoverPositionY')
    ], MdePopoverTrigger.prototype, "positionY", void 0);
    __decorate([
        Input('mdePopoverTriggerOn')
    ], MdePopoverTrigger.prototype, "triggerEvent", void 0);
    __decorate([
        Input('mdePopoverEnterDelay')
    ], MdePopoverTrigger.prototype, "enterDelay", void 0);
    __decorate([
        Input('mdePopoverLeaveDelay')
    ], MdePopoverTrigger.prototype, "leaveDelay", void 0);
    __decorate([
        Input('mdePopoverOverlapTrigger')
    ], MdePopoverTrigger.prototype, "overlapTrigger", void 0);
    __decorate([
        Input('mdePopoverOffsetX')
    ], MdePopoverTrigger.prototype, "targetOffsetX", void 0);
    __decorate([
        Input('mdePopoverOffsetY')
    ], MdePopoverTrigger.prototype, "targetOffsetY", void 0);
    __decorate([
        Input('mdePopoverArrowOffsetX')
    ], MdePopoverTrigger.prototype, "arrowOffsetX", void 0);
    __decorate([
        Input('mdePopoverArrowWidth')
    ], MdePopoverTrigger.prototype, "arrowWidth", void 0);
    __decorate([
        Input('mdePopoverArrowColor')
    ], MdePopoverTrigger.prototype, "arrowColor", void 0);
    __decorate([
        Input('mdePopoverCloseOnClick')
    ], MdePopoverTrigger.prototype, "closeOnClick", void 0);
    __decorate([
        Input('mdePopoverBackdropCloseOnClick')
    ], MdePopoverTrigger.prototype, "backdropCloseOnClick", void 0);
    __decorate([
        Output()
    ], MdePopoverTrigger.prototype, "opened", void 0);
    __decorate([
        Output()
    ], MdePopoverTrigger.prototype, "closed", void 0);
    __decorate([
        HostListener('click', ['$event'])
    ], MdePopoverTrigger.prototype, "onClick", null);
    __decorate([
        HostListener('mouseenter', ['$event'])
    ], MdePopoverTrigger.prototype, "onMouseEnter", null);
    __decorate([
        HostListener('mouseleave', ['$event'])
    ], MdePopoverTrigger.prototype, "onMouseLeave", null);
    __decorate([
        HostListener('mousedown', ['$event'])
    ], MdePopoverTrigger.prototype, "_handleMousedown", null);
    MdePopoverTrigger = __decorate([
        Directive({
            selector: '[mdePopoverTriggerFor]',
            exportAs: 'mdePopoverTrigger'
        }),
        __param(3, Optional())
    ], MdePopoverTrigger);
    return MdePopoverTrigger;
}());
export { MdePopoverTrigger };
//# sourceMappingURL=data:application/json;base64,